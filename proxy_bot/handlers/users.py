from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update


from keyboards.users import user_action_keyboard, confirm_delete_keyboard, get_user_list_keyboard


from telegram.ext import ContextTypes
import asyncio
import re
import logging
from utils.creds import load_creds, save_creds, generate_password
from utils.misc import auto_delete_message

from config import TIMEOUT_SEC


# ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    creds = load_creds()
    if not creds:
        return await q.edit_message_text("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    print("DEBUG | CREDS =", creds, "–¢–∏–ø:", type(creds), "–î–ª–∏–Ω–∞:", len(creds), flush=True)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    base_kb = [list(row) for row in get_user_list_keyboard(creds).inline_keyboard]


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    await q.edit_message_text(
        "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(base_kb)
    )
    await asyncio.sleep(TIMEOUT_SEC)


async def handle_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    u = q.data.split(":",1)[1]
    await q.edit_message_text(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {u}", reply_markup=user_action_keyboard(u))


async def add_user_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    context.user_data["adding"] = True
    context.user_data["last_chat"] = (q.message.chat_id, q.message.message_id)

    msg = await q.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω (–ø–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è):")
    context.user_data["input_msg_id"] = msg.message_id


async def add_user_exec(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("adding"):
        return

    user = update.message.text.strip()
    user = user.lower()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞)
    await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)

    # üîí –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
    if not re.fullmatch(r"[a-zA-Z0-9_-]{2,30}", user):
        msg = await update.message.reply_text(
            "‚ö†Ô∏è –õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ (2‚Äì30 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        asyncio.create_task(auto_delete_message(context.bot, msg.chat_id, msg.message_id, delay=7))
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    pwd = generate_password()
    creds = load_creds()
    creds[user] = pwd
    save_creds(creds)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (–ª–æ–≥–∏–Ω + –ø–∞—Ä–æ–ª—å)
    msg = await update.message.reply_text(f"‚úÖ `{user}` | `{pwd}`", parse_mode="Markdown")
    asyncio.create_task(auto_delete_message(context.bot, msg.chat_id, msg.message_id, delay=15))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ inline
    chat_id, msg_id = context.user_data.get("last_chat", (None, None))
    if chat_id:
        await context.bot.edit_message_text(
            "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            chat_id=chat_id, message_id=msg_id,
            reply_markup=get_user_list_keyboard(creds)
        )
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω
    input_msg_id = context.user_data.pop("input_msg_id", None)
    if input_msg_id:
        try:
            await context.bot.delete_message(chat_id=update.message.chat_id, message_id=input_msg_id)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞: {e}")

    context.user_data.pop("adding", None)

async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    u = q.data.split(":",1)[1]
    msg = await q.message.reply_text(f"‚ùì –£–¥–∞–ª–∏—Ç—å `{u}`?", parse_mode="Markdown", reply_markup=confirm_delete_keyboard(u))

    asyncio.create_task(auto_delete_message(context.bot, msg.chat_id, msg.message_id, delay=30))

    await asyncio.sleep(TIMEOUT_SEC)

async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    u = str(q.data.split(":", 1)[1])
    creds = load_creds()

    if u in creds:
        del creds[u]
        save_creds(creds)
        msg = await q.message.reply_text(f"‚úÖ `{u}` —É–¥–∞–ª—ë–Ω.")
        asyncio.create_task(auto_delete_message(context.bot, msg.chat_id, msg.message_id, delay=10))

    else:
        msg = await q.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω", parse_mode="Markdown")
        asyncio.create_task(auto_delete_message(context.bot, msg.chat_id, msg.message_id, delay=10))


    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    markup = get_user_list_keyboard(load_creds())
    await q.message.reply_text("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=markup)
    await asyncio.sleep(TIMEOUT_SEC)

async def show_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    u = q.data.split(":",1)[1]
    pwd = load_creds().get(u)
    await q.message.reply_text(
        f"üîë `{u}`: `{pwd}`" if pwd else "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω",
        parse_mode="Markdown"
    )
    await asyncio.sleep(TIMEOUT_SEC)

