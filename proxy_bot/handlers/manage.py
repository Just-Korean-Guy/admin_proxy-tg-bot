import os
import subprocess
import datetime
import shutil
import asyncio

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from config import TIMEOUT_SEC
from utils.sysinfo import format_uptime  # –¥–ª—è uptime_command

from keyboards.manage import manage_menu_keyboard, confirm_reboot_keyboard
from utils.misc import auto_delete_message

# ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def restart_proxy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        await q.message.reply_text("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ proxy...")
        await asyncio.create_subprocess_exec("systemctl", "restart", "squid")
        await q.message.reply_text("‚úÖ Proxy –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
    except Exception as e:
        await q.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")

async def confirm_reboot_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    msg = await q.message.reply_text("‚ùó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞?", reply_markup=confirm_reboot_keyboard())

    asyncio.create_task(auto_delete_message(context.bot, msg.chat_id, msg.message_id, delay=30))

async def reboot_server(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        await q.message.reply_text("üîÑ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
        await asyncio.create_subprocess_exec("reboot")
    except Exception as e:
        await q.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")

async def uptime_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    up = format_uptime()
    await update.message.reply_text(f"‚è± –ê–ø—Ç–∞–π–º: {up}")
    await asyncio.sleep(TIMEOUT_SEC)

async def restore_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ôªÔ∏è *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:*\n\n"
        "1\\. –°–∫–æ–ø–∏—Ä—É–π –∞—Ä—Ö–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä\n"
        "2\\. –†–∞—Å–ø–∞–∫—É–π:\n"
        "`tar xzf –∏–º—è_–∞—Ä—Ö–∏–≤–∞\\.tar\\.gz -C /`\n\n"
        "3\\. –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤:\n"
        "`dpkg --set-selections < package-list\\.txt`\n"
        "`apt-get dselect-upgrade`"
    )
    await update.message.reply_text(text, parse_mode="MarkdownV2")

async def restore_inline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await restore_info(q, context)



async def manual_backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import datetime
    import shutil

    total, used, free = shutil.disk_usage("/")
    percent_used = used / total * 100

    if percent_used >= 90:
        await update.message.reply_text("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ. –ë—ç–∫–∞–ø –æ—Ç–º–µ–Ω—ë–Ω.")
        return

    now = datetime.datetime.now().strftime("%Y-%m-%d")
    bdir = "/root/backups"
    os.makedirs(bdir, exist_ok=True)

    # –ü—É—Ç–∏ –∫ –∞—Ä—Ö–∏–≤–∞–º
    etc_arc  = f"{bdir}/etc-backup-{now}.tar.gz"
    var_arc  = f"{bdir}/var-backup-{now}.tar.gz"
    pkg_txt  = f"{bdir}/package-list-{now}.txt"
    scripts_arc = f"{bdir}/scripts-backup-{now}.tar.gz"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–≤
    subprocess.run(["tar", "czf", etc_arc, "/etc"], check=True)
    os.system(f"tar czf {var_arc} /var/backups")
    os.system(f"dpkg --get-selections > {pkg_txt}")
    os.system(f"tar czf {scripts_arc} /root/final-proxy-stack /root/proxy_bot /root/final-proxy-stack/proxy_bot/.env")

    if update.message:
        target = update.message
    else:
        target = update.callback_query.message

    async def send_file(path, label):
        if os.path.exists(path):
            size_mb = os.path.getsize(path) / 1024 / 1024
            if size_mb < 49:
                with open(path, "rb") as f:
                    await target.reply_document(f, filename=os.path.basename(path), caption=label)
            else:
                await target.reply_text(f"‚ö†Ô∏è `{os.path.basename(path)}` —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} MB), –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", parse_mode="Markdown")

    await send_file(etc_arc,  "üß© –ë—ç–∫–∞–ø /etc")
    await send_file(var_arc,  "üß© –ë—ç–∫–∞–ø /var/backups")
    await send_file(scripts_arc, "üìÅ –°–∫—Ä–∏–ø—Ç—ã –∏ –±–æ—Ç")
    await send_file(pkg_txt,  "üìÑ –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    restore_path = f"{bdir}/README-restore-{now}.txt"
    shutil.copyfile(
        "/root/final-proxy-stack/proxy_bot/README-restore-template.txt",
        restore_path
    )

    await send_file(restore_path, "üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

async def backup_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await manual_backup(update.callback_query, context)


async def clean_backups_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    script_path = "/root/clean_old_backups.sh"

    if os.path.isfile(script_path):
        try:
            os.system(script_path)
            msg = await q.message.reply_text("üóë –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª–µ–Ω—ã.")
            asyncio.create_task(auto_delete_message(context.bot, msg.chat_id, msg.message_id, delay=10))
        except Exception as e:
            await q.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
    else:
        await q.message.reply_text("‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


async def confirm_clean_all_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    kb = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="action:clean_all")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="menu:manage")],
    ]
    msg = await q.message.reply_text("‚ùó –£–¥–∞–ª–∏—Ç—å *–≤—Å–µ* –±—ç–∫–∞–ø—ã –∏–∑ /root/backups/?", parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))
    asyncio.create_task(auto_delete_message(context.bot, msg.chat_id, msg.message_id, delay=30))

    await asyncio.sleep(TIMEOUT_SEC)

async def clean_all_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    os.system("rm -f /root/backups/*")
    await q.message.reply_text("üß® –í—Å–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª–µ–Ω—ã.")
    await asyncio.sleep(TIMEOUT_SEC)

async def show_manage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    kb = [
        [InlineKeyboardButton("üîÅ –†–µ—Å—Ç–∞—Ä—Ç proxy", callback_data="action:restart")],
        [InlineKeyboardButton("‚ùó –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data="action:confirm_reboot")],
        [InlineKeyboardButton("üì¶ –ë—ç–∫–∞–ø",         callback_data="action:backup")],
        [InlineKeyboardButton("‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="action:restore")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –±—ç–∫–∞–ø—ã", callback_data="action:clean_backups")],
        [InlineKeyboardButton("üß® –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±—ç–∫–∞–ø—ã", callback_data="action:confirm_clean_all")],
        [InlineKeyboardButton("üìã –ú–µ–Ω—é",          callback_data="menu:main")],
    ]
    await q.edit_message_text("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(kb))
    await asyncio.sleep(TIMEOUT_SEC)


